# I use makefiles to control the execution of monte-carlo and
# empirical code, and to make sure that my LaTeX files are generated
# correctly.  You can run 
#
# make -n
#
# to generate a list the order of commands to run.  Running
#
# make
#
# should run the analysis and generate the final pdf file: paper.pdf

SHELL := /bin/sh
R := R
RFLAGS := --vanilla
sqlite := sqlite3
sqliteFLAGS := $(empty)
TEXFLAGS := -q

## define some convenience functions
object = $(notdir $(basename $(1)))
addboth = $(addprefix $(1),$(addsuffix $(2),$(3)))

# variables for the first monte carlo; this is a little complciated
# because I'm using the makefile to split the simulations into several
# different jobs (I'm using a computer with mutliple processors).  Be
# aware that the results reported in the paper will change slightly if
# you change the number of jobs, because of the seeding for the random
# number generators.
mcSQL   := $(call addboth,mc/db/,.created,nobs coefficients)
mcP     := mc/db/oosstats.created 
mcDB    := $(mcSQL) $(mcP)
mcRnw   := $(wildcard mc/*.Rnw)

empiricplots = $(call addboth,empirics/plots/,.pdf,oos-mse-1 oos-mse-1b oos-mse-2 oos-mse-2b forecastplot1 forecastplot2)
empirictables = $(call addboth,empirics/tables/,.tex,waldtest coeftest)

.PHONY: all mc clean dist burn zip
.DELETE_ON_ERROR: $(mcDB) 
.IGNORE: paper.pdf

# Basic execution of the makefile will run all of the tests, then
# build the final version of the paper.
all: paper.pdf
mc: $(mcDB) $(mcRnw:.Rnw=.pdf)# for convenience -- allows 'make mc'

# The command to generate the final pdfs is pretty straightforward.
# I'm using the R version of texi2dvi so that it works directly with
# Sweave files.  Basic texi2dvi is missing some macros.
$(mcRnw:.Rnw=.tex): %.tex: %.Rnw mc/db/oosstats.created
	cd $(dir $<); $(R) $(RFLAGS) CMD Sweave $(notdir $<) &> $(notdir $<)out; cd $(CURDIR)
%.pdf: %.tex
	cd $(dir $<); $(R) $(RFLAGS) CMD texi2dvi -b -p $(notdir $<); cd $(CURDIR)
paper.pdf: paper.tex mc/plot-oos-size.pdf mc/plot-insample-size.pdf mc/plot-interval.pdf $(empiricplots) $(empirictables)
	texi2dvi $(TEXFLAGS) -p $<

# These are the dependencies for the database.  Since all of the
# tables are stored inside the same file, we can't use the filenames
# directly to control execution order.  Instead, we're using empty
# files as dummy variables that indicate when the table was built.
# This is facilitated by our naming scheme: the SQL commands to create
# the table or view 'xxx' are contained in the file 'xxx.sql'.  The R
# commands to create the table 'xxx' are contained in 'xxx.R'.  The
# dummy file 'xxx.created' indicates when the table was first created
# and filled with data.  So we can represent the entire database
# creation by using two static rules (one for the R files and one for
# the SQL files) and a bunch of dependencies.
$(mcSQL): %.created: %.sql
	$(sqlite) $(sqliteFLAGS) mc/simulations.db < $<
	touch $@
# The order of this dependency is abitrary; we want to prevent these
# two commands from being run simultaneously during a parallel make.
mc/db/coefficients.created: mc/db/nobs.created
# I use the makefile to parallelize the simulations (this is kind of
# ghetto, but effective and easy).  Basically, I create several
# different temporary databases and store simulation results in each
# one, then insert the values into a table in the main database -- the
# reason is to get around problems that SQLite has with concurrent
# write access (in the future, I'll probably use a different DBM).
# All of the dependencies that manage that process are contained in
# mc-setup.mk, which is automatically generated by mc-setup.py.
# mc-setup.py has the parameters that control the number of
# simulations, number of jobs to use, etc.
mc-setup.mk: mc-setup.py
	python $< > $@
include mc-setup.mk

## dependencies for the goyal-welch empirics
empirics: $(empiricplots) $(empirictables)
$(empirictables) $(empiricplots): empirics/oos-analysis.done
	touch $@

empirics/oos-analysis.done: empirics/oos-analysis.R empirics/AllData2009.csv
	cd $(dir $<); Rscript $(RFLAGS) $(notdir $<); cd $(CURDIR)
	touch $@

# Automatically create an archive file
archfile = calhoun-2010-overfit.tar.gz
zip: $(archfile)
$(archfile): $(filter-out .bzrignore goyal/% notes/% slide-plots/% slides.org, $(shell bzr ls -R -V --kind=file)) paper.pdf AllRefs.bib $(empiricplots) $(empirictables) mc/plot-oos-size.pdf mc/plot-insample-size.pdf mc/plot-interval.pdf $(wildcard mc/plots/*.pdf)
	tar chzf $@ $^

Online: $(archfile)
	scp $? gcalhoun@econ22.econ.iastate.edu:public_html/software
	touch $@

# There are a few other standard targets that remove unnecessary
# left-over files.
clean:
	$(RM) -f $(foreach d,. mc mc/db,$(addprefix $d/,*.prv *.log *.bbl *.aux *.toc *~ *.Rout *.blg *.Rnwout .Rhistory))
distclean: clean
	$(RM) -f mc-setup.mk mc/db/*.created mc/db/*.db mc/*.tex
burn: distclean
	$(RM) -f mc/simulations.db mc/plots/* mc/*.pdf
	$(RM) -f empirics/*.created mc/plots/* mc/*.pdf mc/tables/*
	$(RM) -f *.pdf